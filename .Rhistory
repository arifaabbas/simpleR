dta[i,5] <- ""
dta[i,6] <- ""
dta[i,7] <- ""
}
}
names(dta) <- c("Vars", "Class", "Unique", "Values", "", "", "")
print(dta, right = F)
}
if (option == 3) {
cat("\n", "Summary statistics:","\n","---------","\n")
print(summary(df))
}
if (option == 4) {
cat("\n", "Missing data by variable:","\n","---------","\n")
dta <- data.frame()
for (i in 1:length(df)){
missing <- sum(is.na(df[i]))
dta[i,1] <- colnames(df[i])
dta[i,2] <- missing
}
names(dta) <- c("Vars", "Miss")
print(dta)
cat("\n")
if (sum(dta[,2]) > 1) {
cat("This dataset has ", missing, " missing values.\nGo back to the main menu to handle this missing data")
}
if (sum(dta[,2]) == 1) {
cat("This dataset has 1 missing value.\nGo back to the main menu to handle this missing data")
}
else {
cat("No missing data detected in this dataset.\n",
"Tip: check dataset codebook if avaiable to determine if any missing data is encoded as a distinct value (ex. 999).")
}
}
if (option == 5) {
main()
break
}
cat("\n", "--------------", "\n", "\n")
}
}
# 3. Manage: -----------
manage_select <- function(){
cat((bold("\n\nManage/Change the Contents of your Dataframe")), "\n\nDo you want to:
1. Subset your data
2. Change existing variables", sep = "")
option <- readline("Type the number associated: ")
result <- options(option, 1:2, main())
if(is.null(result$go)){
manage_options(option)
}
}
manage_options <- function(option){
if(option == "1"){
subset()
}
else if(option == "2"){
changevar()
}
}
subset <- function(df = e.simple$df, dfname = e.simple$dfname, name = e.simple$name){
repeat{
cat((bold("\nSubset your Data")),
"\n\nBefore you do any subsetting, would you like this subsetting to occur in your dataframe '",
(underline(dfname)), "',
or in a copy of your dataframe '", (underline(dfname)), "'?
Would you like to:
1. Create a copy of your dataframe '", (underline(dfname)), "': subset in a copy
to  preserve '", (underline(dfname)), "'  in your global environment
2. Use the dataframe '", (underline(dfname)), "': subset in '", (underline(dfname)), "'", sep = "")
option <- readline("Type the number associated: ")
result <- options(option, 1:2, manage_select())
if(!(is.null(result$go))){break}
option <- result$option
if(option == 1){
cat("\nYou will have to provide a name for your subset of the dataframe '", (underline(dfname)), "'", sep = "")
naming("dataframe", subset())
if(!(is.null(name))){
e.simple$dfname <- name
assign(e.simple$dfname[1], df, envir = .GlobalEnv)
subset_select()
break}
else{break}
}
else{
subset_select()
break}
}
}
changevar <- function(df = e.simple$df, dfname = e.simple$dfname, name = e.simple$name){
repeat{
cat((bold("\nChange Existing Variables")),
"\n\nBefore you change any variables, would you like this data management to occur in your dataframe '",
(underline(dfname)), "',
or in a copy of your dataframe '", (underline(dfname)), "'?
Would you like to:
1. Create a copy of your dataframe '", (underline(dfname)), "': subset in a copy
to  preserve '", (underline(dfname)), "'  in your global environment
2. Use the dataframe '", (underline(dfname)), "': subset in '", (underline(dfname)), "'", sep = "")
option <- readline("Type the number associated: ")
result <- options(option, 1:2, manage_select())
if(!(is.null(result$go))){break}
option <- result$option
if(option == "1"){
cat("\nYou will have to provide a name for your copy of the dataframe '", (underline(dfname)), "'", sep = "")
naming("dataframe", changevar())
if(!(is.null(name))){
e.simple$dfname <- name
assign(e.simple$dfname[1], df, envir = .GlobalEnv)
changevar_select()
break}
else{break}
}
else{
changevar_select()
break}
}
}
#_______________________________________________
# Subset:
subset_select <- function(){
cat((bold("\n\nSubsetting Options")),
"\n\nDo you want to:
1. Remove specific variables
2. Keep specific variables", sep = "")
option <- readline("Type the number associated: ")
result <- options(option, c(1:2), subset())
if(is.null(result$go)){
option <- result$option
subset_options(option)
}
}
subset_options <- function(option, df = e.simple$df, dfname = e.simple$dfname, variables = e.simple$variables){
if(option == "1"){
cat((bold("\nRemove Specific Variables")))
varname("remove", subset_select())
if(!(is.null(variables))){
remove_vars()
subset_select()
}
}
if(option == "2"){
cat((bold("\nKeep Specific Variables")))
varname("only keep", subset("2"))
if(!(is.null(variables))){
keep_vars()
subset_select()
}
}
}
remove_vars <- function(variables = e.simple$variables, df = e.simple$df, dfname = e.simple$dfname){
variablessplit <- strsplit(variables, " ")
variablessplit <- variablessplit[[1]]
e.simple$df <- df %>%
select(-all_of(variablessplit))
assign(dfname[1], e.simple$df, envir = .GlobalEnv)
}
keep_vars <- function(variables = e.simple$variables, df = e.simple$df, dfname = e.simple$dfname){
variablessplit <- strsplit(variables, " ")
variablessplit <- variablessplit[[1]]
e.simple$df <- df %>%
select(all_of(variablessplit))
assign(dfname[1], e.simple$df, envir = .GlobalEnv)
}
#_______________________________________________
# Change Vars:
changevar_select <- function(){
cat((bold("\nChange Existing Variables")),
"\n\nDo you want to:
1. Change variable class
2. Rename variable
3. Recode variable values")
option <- readline("Type the number associated: ")
result <- options(option, c(1:3), changevar())
if(is.null(result$go)){
option <- result$option
changevar_options(option)
}
}
changevar_options <- function(option, df = e.simple$df, dfname = e.simple$dfname, variables = e.simple$variables){
if(option == "1"){
cat((bold("\nChange Variable Class")))
varname("re-class", changevar_select(), solo = 1)
if(!(is.null(variables))){
changevar_class()
manage_select()}
}
if(option == "2"){
cat((bold("\nRename Variable")))
varname("rename", changevar_select(), solo = 1)
if(!(is.null(variables))){
changevar_name()
manage_select()}
}
if(option == "3"){
cat((bold("\nRecode Variable Values")))
varname("recode", changevar_select(), solo = 1)
if(!(is.null(variables))){
changevar_recode()
manage_select()}
}
}
changevar_class <- function(variables = e.simple$variables, df = e.simple$df, dfname = e.simple$dfname) {
cat("\nWhat class would you like to change the variable(s) ", variables, "to?",
"
1. Numeric
2. Character
3. Logical
4. Factor")
option <- readline("Type the number associated: ")
result <- options(option, c(1:4), changevar_options(1))
if(is.null(result$go)){
option <- result$option
variablessplit <- strsplit(variables, " ")
variablessplit <- variablessplit[[1]]
if (option == 1){
temp <- list()
for (i in variablessplit){
if (length(na.omit(df[[i]])) == length(na.omit(as.numeric(df[[i]])))){
df[[i]] <- as.numeric(df[[i]])
}
else {
append(temp, i)
}
}
if(length(temp) > 0){
cat("Unfortunately these variables were not coerible into class numeric:", temp)
}
else {
cat("All specified variables were changed to class numeric")
}
}
if (option == 2){
for (i in variablessplit){
df[[i]] <- as.character(df[[i]])
}
cat("All specified variables were changed to class character")
}
if (option == 3){
temp <- list()
for (i in variablessplit){
try <- unique(na.omit(df[[i]]))
if (length(try) == 2){
for (n in 1:length(df[[i]])){
if (df[[i]][[n]] == try[1]){
df[[i]][[n]] <- FALSE
}
if (df[[i]][[n]] == try[2]){
df[[i]][[n]] <- TRUE
}
}
df[[i]] <- as.logical(df[[i]])
cat(try[1], "recoded as: FALSE\n", try[2], "recoded as: TRUE\n")
}
else {
append(temp, i)
}
}
if(length(temp) > 0){
cat("Unfortunately these variables were not coerible into class logical:", temp)
} else {
cat("All specified variables were changed to class logical")
}
}
if (option == 4){
cat("All specified variables were changed to class factor\nLevels:\n")
for (i in variablessplit){
df[[i]] <- as.factor(df[[i]])
cat(i,": ", levels(df[[i]]),"\n")
}
}
e.simple$df <- df
assign(dfname[1], e.simple$df, envir = .GlobalEnv)
}
}
changevar_name <- function(variables = e.simple$variables, df = e.simple$df, dfname = e.simple$dfname, name = e.simple$name) {
naming("variable", changevar_options(2))
if(!(is.null(e.simple$name))){
e.simple$df <- rename(df, name = variables)
assign(dfname[1], df, envir = .GlobalEnv)
}
}
changevar_recode <- function(variables = e.simple$variables, df = e.simple$df, dfname = e.simple$dfname) {
cat("\nWhat value of ", variables, " would you like to recode?")
print(unique(df[[variables]]))
option <- readline("Type a valid variable response: ")
result <- options(option, unique(df[[variables]]), changevar_options(3))
if(is.null(result$go)){
option <- result$option
response <- readline("What would you like to recode: ")
go <- back(response, changevar_options(3))
if(is.null(go)){
for (i in 1:length(df[[variables]])){
if (df[[variables]][[i]] == option){
df[[variables]][[i]] <- response}
}
e.simple$df <- df
assign(dfname[1], e.simple$df, envir = .GlobalEnv)
cat(option," has now been recoded as ", response)
}
}
}
# 4. Analyse: -----------
simple.mreg <- function(df = e.simple$df, dfname = e.simple$dfname){
plot.mreg <- function(x, points = FALSE, dot.size = 1, dot.alpha=.5, ci= TRUE, ...){
vars <- names(x$model)[names(x$model) != x$terms[[2]]]
myplots <- vector(mode="list", length=length(vars))
names(myplots) <- vars
for(i in vars){
myplots[[i]] <- plot(ggeffect(x, i), add.data=points,
dot.size=dot.size, dot.alpha=dot.alpha, ci=ci, ...)+ labs(title="")
}
final <- wrap_plots(myplots) + plot_annotation(title="Effects Plots",
subtitle="Each variables bilateral relationship controlling for the others")
return(final)
}
mreg <- function(formula, df){
fit <- lm(formula, df)
fit$call <- str2lang(paste("lm(formula=", deparse(substitute(formula)),
", data=", deparse(substitute(df)), ")"))
class(fit) <- c("mreg", "lm")
return(fit)
}
#Introduction to reg ----
repeat{
cat((underline("Welcome to conducting a multiple regression!\n")),
"Would you like a brief overview of what a multiple regression entails?\n",
"  1.", (green(" Yes\n")),
"  2.", (red(" No")),sep="")
overview <- readline("Please enter the number associated with the option:")
result <- options(overview, 1:2, main())
if(!(is.null(result$go))){break}
overview <- result$option
if (overview == 1){
cat((underline$green("\nMultiple linear regression")), " also known simply as multiple regression, is a statistical technique
that uses ", (bold("several explanatory variables")), " (i.e predictor variables or independent variables) to
predict the outcome of a ", (bold("response variable")), " (i.e predicted variable or dependent variable).
\nMultiple regression is an extension of simple linear regression as you can input more than one
explanatory variable that gives you a better and more in-depth analysis.\n",
(green("\nIn summary")), ", multiple regression will allow you to see how the explanatory variables are affecting
the response variables, which is useful in trying to make conclusions regarding certain hypothesis.", sep="")
}
cat("\n----------------------------------------------------------------------------------------------------------------",sep="")
cat((bold$red("\nNote:")), " Please ensure all variables that will be used in this regression have",
(red$bold(" no missing values")), " and are the \nsuitable type and class for the multiple regression to provide meaningful results.","\n",
"\n> If at any point you want to go back to the main menu just type: ", (bold$green("!!!")), sep="")
cat("\n----------------------------------------------------------------------------------------------------------------",sep="")
cat("\nNow you will be asked to input the variable you want to predict (i.e response/dependent variable).", "\n",
"Please ensure you enter the ", (bold$red("exact name")), " of this variable.", sep = "")
#Input dependent variable ----
repeat{
dv <- readline("Enter dependent variable name here and hit return:")
go <- back(dv, main())
if(!(is.null(go))){break}
if(length(setdiff(dv, names(df))) > 0){
cat("\n'", (bold$underline((setdiff(dv, names(df))))),"'", " is an", (bold$red(" invalid"))," variable that is not in the dataset"," '", (blue(e.simple$dfname)),"'", "\n",
"\nPlease input a variable that is in the dataset"," '", (blue(e.simple$dfname)),"'", sep = "")
}
else{
input1 <- dv
cat("\nThanks! The variable you chose is: ", (bold(input1)),"\n", sep="")
break
}
}
if(!(is.null(go))){break}
cat("\nNow you will be asked to enter the ", (bold$red("exact name")), " of the explanatory variables (i.e independent/predictor)
that will be tested against the response variable.\n", sep="")
#Input independent variable ----
repeat{
iv <- readline("Please enter the independent variables seperated by a space:")
go <- back(iv, main())
if(!(is.null(go))){break}
iv <- strsplit(iv, " ")
iv <- iv[[1]]
if (length(setdiff(iv, names(df))) > 0){
cat("\nThe following variables are ", (bold$red("invalid ")),"as they are not in the dataset"," '", (blue(e.simple$dfname)),"':","\n",
(bold$underline(setdiff(iv, names(df)))),"\n\n",
"Please input a variable that is in the dataset"," '", (blue(e.simple$dfname)),"'", sep = "")
}else{
input2 <- iv
cat("\nThanks! The variables you chose are: ", (bold(input2)), sep="")
break
}
}
#Results ----
if(!(is.null(go))){break}
cat((bold$underline$green("\nHere are the results for the multiple regression:")))
ls <- input1
rs <- paste(input2, collapse="+")
f <- paste(ls, "~", rs)
formula <- as.formula(f)
fit <- mreg(formula, df)
print(summary.lm(fit))
results <- summary.lm(fit)$coefficients
cat((underline$bold("Do you need help understanding the output and significance of the above regression?")),"\n",
"  1.", (green(" Yes\n")),
"  2.", (red(" No")), sep="")
select <- readline("Please enter the number associated with the option:")
result <- options(select, 1:2, main())
if(!(is.null(result$go))){break}
select <- result$option
if (select == 1){
cat((underline("\nHere are the ", (bold$blue("significant results")), " where the p value was less than 0.05:","\n\n", sep = "")))
for(i in 2:nrow(results)){
if(results[i, 4] < .05){
cat("For a 1 point change in ",  (bold(dimnames(results)[[1]][i])),
", ", (blue(input1)), " is expected to change by ", (red(results[i, 1])),".\n", sep = "")
}
}
}
repeat{
cat("\n",(underline("Additionally, do you want to do any of the following?")),"\n",
" 1.", (blue("Understand the ", (bold("R-squared value and Adjusted R-squared")), " value\n")),
" 2.", (green("Get ", (bold("plots of each paired relationship")), " between the dependent and each independent variable\n")),
" 3.", (magenta("Get the ", (bold("relative importance")), " of each variable in your model\n")),
" 4.", (yellow("Go back to the ", (bold("main menu")))), sep="")
input <-  readline("Please enter the number associated with the option:")
result <- options(input, 1:4, main())
if(!(is.null(result$go))){break}
input <- result$option
#R and Adjust R squared analysis ----
if (input == 1){
r.s <- summary.lm(fit)$r.squared
ars <- summary.lm(fit)$adj.r.squared
cat((red("\nThe R-squared value for this analysis is ")), (bold(r.s)),
"\n> The R-squared value explains the degree to which your explanatory variables explains the variation
of your response variable.\n> So an R-squared value of ", r.s," means that ",(r.s)*100,"%"," of the variation in the response variable
is explained by the explanatory variables in the analysis.","\n\n", sep ="")
cat((red("The Adjusted-R squared value for this analysis is ")), (bold(ars)),
"\nThe Adjusted R-squared increases when new terms improve the model more than would be expected by chance and
it decreases when a explanatory variable improves the model by less than expected.
> The Adjusted R-squared helps to determine how much of the significance is just due to addition of
explanatory variables.
> The adjusted R-squared compensates for the addition of variables and only increases if the new
explanatory added enhances the model above what would be obtained by probability. Conversely, it will
decrease when a explanatory variable improves the model less than what is predicted by chance\n", sep="")
}
# Mreg Plots ----
if (input == 2){
cat((bold$blue$underline(("\nOn the right is the plots! >>>>"))))
cat("\n>These plots", (bold(" show the relationship of response to each explanatory variable seperately")), " so that you can
understand the relationship between each response varibale and explanatory variables better.\n", sep="")
p <- plot.mreg(fit, points=TRUE)
print(p)
}
# General dominance plots ----
if (input == 3){
cat((bold$magenta$underline("\nOn the right is your general dominance plot! >>>>")),
"\nThis plot shows you the ", (bold("average importance of each explanatory variable")), " relative to all the other
explanatory variables included in the multiple regression.\n", sep="")
rela_fit <- lm(formula, mtcars)
da_df <- dominanceAnalysis(rela_fit)
rp <- plot(da_df) +
labs(x = "Variable Name",
y = "Relative Importance",
title = "General Dominance Plot of Response Variables in Analysis")+
coord_flip() +
theme(legend.position= "none")
print(rp)
}
if (input == 4){
cat()
main()
break
}
}
if(!(is.null(result$go))){break}
}
}
df_select()
}
simple()
View(arifa)
?crayon
?plot
library(ggeffects)
library(roxygen2)
library(roxygen2)
library(crayon)
?crayon
library(ggeffects)
?plot
library(simpleR)
library(simpleR)
hi <- mtcars
simple()
View(hi)
simple()
simple()
hi <- mtcars
simple()
5
simple()
library(simpleR)
hi <- mtcars
simple()
library(simpleR)
hi <- mtcars
simple()
library(simpleR)
hi <- mtcars
simple()
library(simpleR)
simple()
simple()
simple()
simple()
simple()
simple()
simple()
simple()
simple()
